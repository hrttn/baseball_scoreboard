// Generated by CoffeeScript 1.12.6
(function() {
  var getBestPlayers, getNumberOfPlayers, getPlayersNumber, getTotals, highlightBestScore, toggleButtons,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jQuery(function() {
    toggleButtons();
    highlightBestScore();
    $('#scoreboard').on('change', '.score-player', function() {
      var k, playerNumber, round, roundName, score, scoreRound;
      playerNumber = this.name.slice(-1);
      score = 0;
      for (round = k = 1; k <= 9; round = ++k) {
        roundName = 'score' + round + '-player' + playerNumber;
        scoreRound = Number($('input[name="' + roundName + '"]').val());
        if (isNaN(scoreRound)) {
          scoreRound = 0;
        }
        score += scoreRound;
      }
      $('#total-player' + playerNumber).text(score);
      return highlightBestScore();
    });
    $('#add-player').click(function() {
      var j, k, newPlayerNumber, numberOfPlayers, playersNumber, roundNumber;
      playersNumber = getPlayersNumber();
      for (j = k = 1; k <= 8; j = ++k) {
        if (indexOf.call(playersNumber, j) < 0) {
          newPlayerNumber = j;
          break;
        }
      }
      numberOfPlayers = getNumberOfPlayers();
      if (numberOfPlayers < 8) {
        $('#scoreboard thead tr').append('<th class="player' + newPlayerNumber + '"><input size="6" type="text" name="name-player' + newPlayerNumber + '" class="name-player" value="Player ' + newPlayerNumber + '" placeholder="Player ' + newPlayerNumber + '\'s name" /><button type="button" class="btn btn-danger delete-player">‚ùå</button></th>');
        $('#scoreboard tfoot tr').append('<td class="total-player player' + newPlayerNumber + '" id="total-player' + newPlayerNumber + '">0</td>');
        roundNumber = 1;
        $('#scoreboard tbody tr').each(function() {
          $(this).append('<td class="player' + newPlayerNumber + '"><input type="number" name="score' + roundNumber + '-player' + newPlayerNumber + '"  class="score-player"  min="0" max="42"/></td>');
          return roundNumber++;
        });
        console.log("Player #" + newPlayerNumber + " succesfully created.");
        toggleButtons();
        return highlightBestScore();
      } else {
        return console.log("Maximum number of players reached.");
      }
    });
    $('#scoreboard').on('click', '.delete-player', function() {
      var parentClass, playerNumber, playerNumberClass;
      parentClass = $(this).parent().attr('class');
      playerNumber = parentClass.slice(-1, parentClass.length);
      playerNumberClass = ".player" + playerNumber;
      $(playerNumberClass).remove();
      console.log("Player #" + playerNumber + " succesfully deleted.");
      toggleButtons();
      return highlightBestScore();
    });
    return $('#new-game').click(function() {
      $('.score-player').val('');
      $('.total-player').text('0');
      return highlightBestScore();
    });
  });

  getTotals = function() {
    var playersTotal;
    playersTotal = {};
    $('#scoreboard tfoot .total-player').each(function() {
      return playersTotal[$(this).attr('id')] = Number($(this).text());
    });
    console.log(playersTotal);
    return playersTotal;
  };

  getBestPlayers = function() {
    var bestPlayers, min, player, total, totals;
    totals = getTotals();
    bestPlayers = [];
    min = 378;
    for (player in totals) {
      total = totals[player];
      if (total <= min) {
        if (total === min) {
          bestPlayers.push(player);
        } else {
          bestPlayers = [player];
        }
        min = total;
      }
    }
    return bestPlayers;
  };

  highlightBestScore = function() {
    var bestPlayers, i, k, len, ref, ref1, ref2, results, totalCell;
    bestPlayers = getBestPlayers();
    console.log(bestPlayers);
    ref = getPlayersNumber();
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      totalCell = $('#total-player' + i);
      if ((totalCell.hasClass('bg-success text-white font-weight-bold')) && (ref1 = totalCell.attr('id'), indexOf.call(bestPlayers, ref1) < 0)) {
        results.push(totalCell.removeClass('bg-success text-white font-weight-bold'));
      } else if ((!totalCell.hasClass('bg-success text-white font-weight-bold')) && (ref2 = totalCell.attr('id'), indexOf.call(bestPlayers, ref2) >= 0)) {
        results.push(totalCell.addClass('bg-success text-white font-weight-bold'));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  getNumberOfPlayers = function() {
    var playersNumber;
    playersNumber = getPlayersNumber();
    return playersNumber.length;
  };

  getPlayersNumber = function() {
    var playersNumber;
    playersNumber = [];
    $('#scoreboard thead .name-player').each(function() {
      return playersNumber.push(Number($(this).parent().attr('class').slice(-1)));
    });
    return playersNumber.sort();
  };

  toggleButtons = function() {
    var numberOfPlayers;
    numberOfPlayers = getNumberOfPlayers();
    if (numberOfPlayers > 3) {
      $('.delete-player').prop("disabled", false);
      if (numberOfPlayers > 7) {
        return $('#add-player').prop("disabled", true);
      } else {
        return $('#add-player').prop("disabled", false);
      }
    } else {
      return $('.delete-player').prop("disabled", true);
    }
  };

}).call(this);
